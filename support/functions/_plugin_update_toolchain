#!/bin/bash

#simplebuild_plugin tcupdate (s3.TUP)

tcupdate(){
	clear && _check_bin;
	
	pversion="0.8.5";
	pname="s3.TUP";
	pdesc="Plugin $pname v$pversion";
	configname="$configdir/plugin_update_toolchain.config";
	
	#remove config
	if [ "$1" == "-r" ] || [ "$1" == "--reset" ];then
		if [ -f "$configname" ];then
			if ! _check_github_api_limits 12; then
				echo -e "$y_l""RESET -> Moving existing config file...""$re_";
				bcn="$configname".$(date +"%Y%m%d%H%M%S");
				mv "$configname" "$bcn"
				echo -e "config file backup='$bcn'\n";
			else
				_paktc_timer 30;
			fi;
		fi;
		set -- #remove all commandline parameters
	fi;
	
	#create config
	if [ ! -f "$configname" ];then
		echo -e "$g_l""CLEANUP -> Creating new config file. Please wait...""$y_l""$re_";
		if ! _create_config;then
			exit;
		else
			echo -e "config file='$configname'\nYou can change/extend them to fit your needs.\n";
		fi;
		_paktc_timer 5;
	fi;
	
	#load config	
	source "$configname";
	
	#check config
	_check_config;
	
	if [ "$1" == "-c" ] || [ "$1" == "--create" ];then	
		_create_tc;
		bye;
	elif [ "$1" == "" ];then
		_fill_tc_array;
		unset MENU_OPTIONS;COUNT=0
		if [ "$systype" == "ok" ];then
			if [ "$tcempty" == "0" ];then
				for i in "${INST_TCLIST[@]}";do
					if [ ! "$i" == "native" ];then
						source "$tccfgdir/$i";
						MENU_OPTIONS+=("$_toolchainname" "$_description" "toolchain folder:$tcdir/$i | config file:$tccfgdir/$i");
						counter;
					fi;
				done;
			fi;
			[ $COUNT -eq 0 ] && MENU_OPTIONS+=("" "no toolchains found" "no toolchains found") && counter;
		fi;
		out=$("$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--item-help" "--help-tags" "--default-item" "$3" "--ok-label" "Update" "--cancel-label" "Create" "--help-button" "--help-label" "Exit" "--extra-button" "--extra-label" "Copy" "--title" "-[ Toolchain Menu ]-" \
			--menu "\nSelect one of the installed tool chains that you want to update:\n " \
			"${COUNT+10}" 0 0 "${MENU_OPTIONS[@]}");
		ret="$?"

		tc=$(echo "$out" | awk '{printf $1}');
		case $ret in
			0) #Update toolchain
				tc_menu="1";;
			1) #Start crosstool
				tc_menu="2";
				_create_tc;
				tcupdate "" "0" "$tc";;
			2) #Exit
				bye;;
			3) #Copy toolchain
				[ ! "$tc" == "" ] && _toolchain_repair "$(_copy "$tc")" || echo -e "$r_l  $txt_error:$y_l $tc$w_l Toolchain $txt_n_installed""$rs_";
				sleep 2;
				tcupdate "" "0" "$tc";;
		esac;
	else
		tc="$1"
		[ "$2" == "" ] && tc_menu="0" || tc_menu="$2";
	fi;
	
	#toolchain native not supported
	if [ "$tc" == "native" ];then
		echo -e "$r_l  $txt_error:$y_l $tc$w_l Toolchain library update not supported!""$rs_";
		_nl;
		exit;
	fi;
	
	#toolchain exists check
	[ -f "$tccfgdir/$tc" ] && source "$tccfgdir/$tc";
	if [ -d "$tcdir/$tc/bin" ];then
		cd "$tcdir/$tc/bin";
	else
		echo -e "$r_l  $txt_error:$y_l $tc$w_l Toolchain $txt_n_installed""$rs_";
		[ "$1" == "" ] && sleep 2 && tcupdate "" "0" "$tc";
		_nl;
		exit;
	fi;

	#autodetect toolchain's sysroot, prefix, include, pkgconfig folder
	compilername="$_compiler""gcc";compilername=$(realpath -s $compilername);
	ranlibname="$_compiler""ranlib";ranlibname=$(realpath -s $ranlibname);
	hostname=${_compiler%?};
	incdir=$(realpath -s $(echo | "$compilername" -Wp,-v -xc - -fsyntax-only 2>&1 | grep include$ | tail -n 1 | xargs))
	sr=$("$compilername" -print-sysroot 2>/dev/null);
	sr=$(realpath -sm "$sr" 2>/dev/null);
	if [ ${#sr} -gt ${#tcdir} ];then
		[ -d "$sr/include" ] && cd "$sr"
		[ -d "$sr/usr/include" ] && [ ! "$(realpath $(readlink -- "$PWD") 2>/dev/null)" == "$(realpath "$sr/usr")" ] && cd "$sr/usr" #Ignore symlinks to the same directory
	else
		cd "$tcdir/$tc/$_sysroot"
	fi;
	prefixdir="$PWD"
	pkg=$(find * | grep -m1 "/pkgconfig") && pkgdir="$prefixdir/$pkg" || pkgdir="$prefixdir";
	
	#build menu items from config file
	unset MENU_OPTIONS;COUNT=0;unset libs;
	for i in "${LIBS[@]}"
	do
		[ "${!i}" == "0" ] && continue;
		libkey=$i;
		libname="$i"_name;libname=${!libname};
		libdesc="$i"_desc;libdesc=${!libdesc};
		libversion="$i"_version;libversion=${!libversion};
		libcheck="$i"_check;libcheck=${!libcheck};
		libversioncheck=$(echo "$libcheck" | awk '{printf $2}')
		libcheck=$(echo "$libcheck" | awk '{printf $1}')
		liburl="$i"_url;liburl=${!liburl};
		libversioncurrent=$(_get_version "$pkgdir/$libcheck" "$libversioncheck");
		libversioncompare=$(_compare_version $libversion $(echo $libversioncurrent | sed -e 's/^$/0.0.0/g'));
		libtasks="$i"_tasks[@];libtasks=("${!libtasks}");
		libexports="$i"_exports[@];libexports=("${!libexports}");
		libconfigure="$i"_configure[@];libconfigure=("${!libconfigure}");
		libmake="$i"_make[@];libmake=("${!libmake}");

		MENU_OPTIONS+=("$i"		"$libname $libversion  	$([ $libversioncurrent ] && echo $libversioncompare)	$(echo $libversioncurrent | sed -e 's/^$/ ---/g')"		"$([ $libversioncurrent ] && echo "on" || echo "off")"	"$([ $libname ] && echo "$libname $libversion: $liburl")");counter;
		
		#     0 key     1 desc     2 version     3 checkversion     4 checkfile 5 current version    6 url      7 tasks array
		lib=("$libkey" "$libname" "$libversion" "$libversioncheck" "$libcheck" "$libversioncurrent" "$liburl" "(${libtasks[*]@Q})");
		libs+=("(${lib[*]@Q})");
	done;
	[ $COUNT -eq 0 ] && MENU_OPTIONS+=("" "no libraries found" "no libraries found") && counter;

	opts=$("$gui" "--item-help" "--help-tags" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--default-item" "$3" "--ok-label" "Start" "--help-button" "--help-label" "Info" "--cancel-label" "$([ "$tc_menu" == "1" ] && echo "Back" || echo "Exit")" "--title" "-[ Library Update Menu - \Z2$tc\Zn ]-" "$cl_"\
		"\nSelect all libraries to update in toolchain's SYSROOT folder:\n$prefixdir\n\n       library version    NEW                    CURRENT" \
		"${COUNT+12}" 70 0 "${MENU_OPTIONS[@]}");
	
	#SSL select check
	[ $(echo $opts | tr ' ' '\n' | grep -c "SSL_") -gt 1 ] && echo -e $r_l"\n\nPlease select only one SSL version!"$re_ && sleep 3 && tcupdate $tc;
	
	#HELP section
	first=$(echo "$opts" | awk '{printf $1}');
	libkey=$(echo "$opts" | awk '{printf $2}';);

	if [ "$first" == "HELP" ];then
		sp=$(printf '%*s' 90 | tr ' ' '=');
		txt=$(cat "$configname" | grep ""$libkey"=\|"$libkey"_");
		bcd=$(cat "$configname" | grep ""$libkey"_tasks");
		txt=$(echo -e "Toolchain: $tcdir/$tc\nCompiler:  $compilername\nSysroot:   $sr\nPrefix:    $prefixdir\nInclude:   $incdir\n$sp\n\nLibrary configuration:\n$txt\n\nBuild command:\n$(_replace_tokens "$(_tidy_tasks "$bcd" "$libkey")")");
		tempfile=$(mktemp) && echo -e "$txt" > "$tempfile";
		"$gui" "$st_" "$nc_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--textbox" "$tempfile" 30 80;
		rm "$tempfile" 2>/dev/null;
		tcupdate $tc $tc_menu $libkey;
	fi;	

	#BUILD section
	ts=$(date +%F)_$(date +%T);
	tmpdir="/tmp/lib_source/$ts";
	icount=$(echo $opts | wc -w);i=0;
	for o in $opts;do
		unset buildtasks;
		for l in "${libs[@]}";do
			declare -a lib="${l[*]}";				#populate libs array element
			[ ! "$o" == "${lib[0]}" ] && continue || ((i++));
			logfile="$ldir/"$ts"_update_toolchain_"$_toolchainname"_"${lib[1]}"_"${lib[2]}".log"

			#generate build command list
			declare -a libtasks="${lib[7]}";		#populate tasks array element
			for task in "${libtasks[@]}";do
				task=$(_replace_tokens "$task");	#replace tokens
				buildtasks+=("$task");
			done
			_build "($i/$icount) $tc: library ${lib[1]} ${lib[2]}" $(_extract $(_dl "${lib[6]}" "${lib[1]} ${lib[2]}") "$tmpdir") "$logfile" "${buildtasks[@]}";
		done;
	done;
	[ -d "$tmpdir" ] && rm -r "$tmpdir";
	
	#Reopen update menu
	if [ ${#opts} -gt 0 ];then
		tcupdate $tc $tc_menu $libkey;
	else
		[ "$tc_menu" == "1" ] && tcupdate "" "0" "$tc";
	fi;
	
	bye;
};
_create_tc(){
	_sz;					# Prepare DIALOG settings
	ctdir="$sdir/crosstool";
	ctsrcdir="$ctdir/source";
	cttpldir="$ctdir/templates";
	
	tplempty=0;
	[ ! -d "$cttpldir" ] && mkdir --parents "$cttpldir";
	cd "$cttpldir";

	if [ "$(ls -A "$cttpldir")" ];then
		TPL_LIST=(*);
	else
		tplempty=1;
	fi;

	unset MENU_OPTIONS;COUNT=0;
	if [ "$tplempty" == "0" ];then
		for t in "${TPL_LIST[@]}";do
			desc=$(sed -n -e '/#toolchain template/ s/.*\: *//p' $t);
			[ ! "$desc" ] && desc="no description available";
			[ -d "$tcdir/$t" ] && [ -f "$tccfgdir/$t" ] && color="\Z1" || color="";
			MENU_OPTIONS+=("$t" "$color$desc\Zn" "off" "template filename:$cttpldir/$t");counter;
			counter;
		done;
	fi;
	[ $COUNT -eq 0 ] && MENU_OPTIONS+=("" "no templates found" "no templates found") && counter;
	
	opts=$("$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--item-help" "--help-tags" "--default-item" "$3" "--ok-label" "Start" "--cancel-label" "Setup" "--help-button" "--help-label" "$([ $tc_menu ] && echo "Back" || echo "Exit")" "--title" "-[ Cross Toolchain Template Menu ]-" "$cl_"\
		 "\nSelect on of the templates to create the cross toolchain you want:\n\n\Z1NOTE: If you create a cross toolchain from a template with a red colored description, an existing one with the same name will be replaced without asking!\Zn" \
		 "${COUNT+11}" 0 0 "${MENU_OPTIONS[@]}");
	ret="$?"

	case $ret in
		0) #Start - Build cross toolchain
			if [ -f "$ctsrcdir/ct-ng" ]; then
				icount=$(echo $opts | wc -w);i=0;
				for tpl in $opts;do
					if [ -f "$cttpldir/$tpl" ]; then
						
						logfile="$ldir/$(date +%F)_$(date +%T)_update_toolchain_crosstoolchain_"$tpl".log"; ((i++)); 

						clear;
						sp=$(printf '%*s' 80 | tr ' ' '=')
						echo -e "$sp\nbuild ($i/$icount): command list for cross toolchain $tpl (executed as user $CTNG_USER):\n$sp" | tee -a "$logfile";
						
						#copy template and patching them
						echo "rm "$ctsrcdir/.config*" 2>/dev/null;cp --no-preserve=mode,ownership -f "$cttpldir/$tpl" "$ctsrcdir/.config";" | tee -a "$logfile";
						rm "$ctsrcdir/.config*" 2>/dev/null;cp --no-preserve=mode,ownership -f "$cttpldir/$tpl" "$ctsrcdir/.config";
						#CT_LOCAL_TARBALLS_DIR aka cache folder for downloads
						echo "sed -i \"s#.*CT_LOCAL_TARBALLS_DIR=.*#CT_LOCAL_TARBALLS_DIR=\"$dldir\"#g\" "$ctsrcdir/.config";" | tee -a "$logfile";
						sed -i "s#.*CT_LOCAL_TARBALLS_DIR=.*#CT_LOCAL_TARBALLS_DIR=\"$dldir\"#g" "$ctsrcdir/.config";
						#CT_PREFIX_DIR aka folder that contains the final toolchain
						echo "sed -i \"s#.*CT_PREFIX_DIR=.*#CT_PREFIX_DIR=\"$tcdir/$tpl\"#g\" "$ctsrcdir/.config";" | tee -a "$logfile";
						sed -i "s#.*CT_PREFIX_DIR=.*#CT_PREFIX_DIR=\"$tcdir/$tpl\"#g" "$ctsrcdir/.config";

						#run build as $CTNG_USER
						bcl=$(printf '%s\n' "${CTNG_BUILD_tasks[@]}");
						echo -e "cd "$ctsrcdir";\n[ -d "$tcdir/$tpl" ] && chown -R "$CTNG_USER":"$CTNG_USER" "$tcdir/$tpl";\n$(_replace_tokens "$bcl")\n$sp" | tee -a "$logfile";
						sleep 2;
						cd "$ctsrcdir";
						[ -d "$tcdir/$tpl" ] && chown -R "$CTNG_USER":"$CTNG_USER" "$tcdir/$tpl";
						cmd="${CTNG_BUILD_tasks[@]}";
						sudo -u "$CTNG_USER" -H -- sh -c "$(_replace_tokens "$cmd")" 2>&1;
						err=$(grep '\[ERROR\]' "$ctsrcdir/build.log" | wc -l)

						#save build.log in logs
						cat "$ctsrcdir/build.log" >>"$logfile"; 
						
						if [ ! $err -gt 0 ]; then
							#get target from build.log
							target=$(sed -n -e '/target = / s/.*\= *//p' "$ctsrcdir/build.log");
						
							#compress toolchain
							_compress "$dldir/Toolchain-$tpl.tar.xz" "$tcdir/$tpl" | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ Compress cross toolchain $tpl... ]- " "$pb_" "$_lines" "$_cols";
							
							#create toolchain.cfg
							desc=$(sed -n -e '/#toolchain template/ s/.*\: *//p' "$cttpldir/$tpl");
							_create_toolchaincfg "$tcdir/$tpl" "$tpl" "$target" "" "" "$desc" "" "$dldir/Toolchain-$tpl.tar.xz";
						else
							_paktc_timer 10;
						fi;
					else
						[ "$tpl" == "" ] && echo -e "$r_l  $txt_error:$y_l $tc$w_l Template $txt_n_installed""$rs_";
						sleep 2;
					fi;
				done;
			else
				echo -e "$r_l""\nCHECK -> crosstool-NG is not setup correctly. Please run 'Setup' from menu!\n""$re_";
				_paktc_timer 10;
			fi;
			_create_tc;;
		1) #Setup - Setup crosstool-NG
			logfile="$ldir/$(date +%F)_$(date +%T)_update_toolchain_crosstool-NG_setup.log"
			(
			bcl=$(printf '%s\n' "${CTNG_SETUP_tasks[@]}");
			sp=$(printf '%*s' 80 | tr ' ' '=')
			echo -e "$sp\nbuild command list for crosstool-NG (executed as user $CTNG_USER):\n$sp\ncd "$ctsrcdir"\n$(_replace_tokens "$bcl")\n$sp";
			sleep 2;
			#ct-ng must not run as root, so create and run as the low privileged user defined in config
			id -u "$CTNG_USER" &>/dev/null;
			if [ $? -gt 0 ]; then
				echo "Creating low privileged user "$CTNG_USER", because crosstool-NG must not run as root..."
				userdel -r "$CTNG_USER" 2>/dev/null
				adduser --disabled-password --gecos "" "$CTNG_USER" 2>/dev/null;
			fi;
			
			#adjust folder permissions for low privileged user
			echo "Adjust s3 folder permissions for user "$CTNG_USER"..."
			chmod 755 "$sdir" && chmod 755 "$ctdir"; #s3 support, crosstool folder
			chmod -R 777 "$tcdir" && chmod -R 777 "$dldir" && chmod -R 777 "$ldir"; #s3 toolchains, downloads, logs folder
			
			# setup crosstool wc
			echo "Cleanup source directory "$ctsrcdir/"..."
			rm -r "$ctsrcdir" 2>/dev/null;
			mkdir --parents "$ctsrcdir";
			chown -R "$CTNG_USER":"$CTNG_USER" "$ctsrcdir"; #ct-ng source folder
			cd "$ctsrcdir";
			cmd="${CTNG_SETUP_tasks[@]}";
			sudo -u "$CTNG_USER" -H -- sh -c "$(_replace_tokens "$cmd")" 2>&1;
			) | tee "$logfile" | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ Setup crosstool-NG... ]- " "$pb_" "$_lines" "$_cols";
			_paktc_timer 10;
			_create_tc;;
		2) #Exit
			return;;
	esac;
};
_copy(){

	_sz;					# Prepare DIALOG settings
	nr=$(( $RANDOM % 100 ));
	newtc="$1-$nr";
	newtccfgfile="$tccfgdir/$newtc";
	xzfile="$dldir/Toolchain-$newtc.tar.xz";
	
	(
	#compress toolchain
	_compress "$xzfile" "$tcdir/$1"
	
	#create toolchain.cfg
	source "$tccfgdir/$1" && target="${_compiler%?}" && sysroot="$_sysroot" && lsd="$_libsearchdir" && desc="$_description" && info="$_tc_info";
	_create_toolchaincfg "$tcdir/$1" "$newtc" "$target" "$sysroot" "$lsd" "$desc" "$info" "$xzfile";
	) | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ Copy $1 to $newtc ... ]- " "$pb_" "$_lines" "$_cols";
	[ -f "$newtccfgfile" ] && echo "$newtc";
};
_build(){
	
	_sz;					# Prepare DIALOG settings
	local desc="$1";		# Save 1. argument in a variable
	local libsrcdir="$2";	# Save 2. argument in a variable
	local lf="$3";			# Save 3. argument in a variable
	shift && shift && shift;# Shift all 3. arguments to the left (original $1,$2,$3 gets lost)
	local tasks=("$@"); 	# Rebuild the array with rest of arguments

	(	
	bcl=$(printf '%s\n' "${tasks[@]}");
	
	sp=$(printf '%*s' 80 | tr ' ' '=')
	echo -e "$sp\nbuild command list for $desc:\n$sp\ncd "$libsrcdir\;"\n$bcl\n$sp" | tee -a "$lf";
	sleep 2;
	cd "$libsrcdir";
	( eval "${tasks[@]}" ) 2>&1 | tee -a "$lf"
	) | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ Build $desc... ]- " "$pb_" "$_lines" "$_cols";sleep 2;
	
	#build error message
	error_on_build=$(grep -cw1 Error "$lf");
	if [ "$error_on_build" -gt "0" ]; then
		echo -e ""$r_l"ERRORS on build found, details:\n$b_l  $lf\n$y_l" >$(tty);
		read -n 1 -s -r -p "Press any key to continue";
		echo -e "$re_$w_l";
	fi;
	
};
_dl(){
	[ -d "$dldir/#tmp" ] && rm --recursive --force "$dldir/#tmp"
	mkdir --parents "$dldir/#tmp";
	cd "$dldir/#tmp";
	wget --content-disposition "$1" 2>&1 | stdbuf -o0 awk '/[.] +[0-9][0-9]?[0-9]?%/ { print substr($0,63,3) }' | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ download $2 ]- " --gauge "  $txt_loading $txt_wait" 6 74;
	if [ $? -eq 0 ];then
		fname="$(ls -t | head -n1)"; md5file="$fname.md5";
		md5sum "$fname" > "$md5file";
		cd "$dldir";
		answer=$(md5sum -c "$md5file" 2>/dev/null | awk -F: '{printf $2}');
		[ ! "$answer" == "OK" ] && mv --force "$dldir/#tmp/$fname" "$dldir/$fname";
		rm --recursive --force "$dldir/#tmp";
	fi;
	[ -f "$dldir/$fname" ] && echo "$dldir/$fname";
	exit;
};
_compress(){
	#generate xz-file
	XZ_OPT=-e9 tar -cvJf "$1" -C "$2" .
};
_extract(){
    local c e i;

    (($#)) || return;
	
	edir="$2";
	[ -d "$edir" ] && rm -r "$edir";
	mkdir --parents "$edir";
	
    for i; do
        c='';
        e=1;
		
        if [[ ! -r $i ]]; then
            echo "$0: file is unreadable: \`$i'" >&2;
            continue;
        fi
		
        case $i in
			*.tgz|*.tlz|*.txz|*.tb2|*.tbz|*.tbz2|*.taz|*.tar|*.tar.Z|*.tar.bz|*.tar.bz2|*.tar.gz|*.tar.lzma|*.tar.xz)
				   c=(tar -xvf);;
            *.7z)  c=(7z -x);;
            *.Z)   c=(uncompress);;
            *.bz2) c=(bunzip2);;
            *.exe) c=(cabextract);;
            *.gz)  c=(gunzip);;
            *.rar) c=(unrar -x);;
            *.xz)  c=(unxz);;
            *.zip) c=(unzip -o);;
            *)     echo "$0: unrecognized file extension: \`$i'" >&2;
                   continue;;
        esac
		cd "$edir";
		BEFORE=(.*/ */);
		
		command "${c[@]}" "$i" |"$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ $txt_extracting $i ]- " "$pb_" 20 74;
        ((e = e || $?));
		
		AFTER=(.*/ */);
		for (( j = 0; j < "${#BEFORE[@]}"; j++ )); do
			[ "${BEFORE[j]}" == "${AFTER[j]}" ] || break;
		done
		printf "$edir/${AFTER[j]}";
    done
	exit;
};
_replace_tokens(){
	echo -e "$1" | sed -e "s#@TOOLCHAIN@#$tcdir/$tc#g; \
						s#@CC@#$compilername#g; \
						s#@RANLIB@#$ranlibname#g; \
						s#@PREFIX@#$prefixdir#g; \
						s#@HOST@#$hostname#g; \
						s#@CTNGSOURCE@#$ctsrcdir#g; \
						s#@VALIDATE@#_check_lib#g";
};
_tidy_tasks(){
	echo -e "$1" | sed -e "s#$2"_tasks=\(\""##g; \
						s#$2"_tasks=\(\'"##g; \
						s#$2"_tasks+=\(\""##g; \
						s#$2"_tasks+=\(\'"##g; \
						s#"\"\)\;"##g; \
						s#"\'\)\;"##g;";
};
_get_version(){
	r="";
	if [ -f "$1" ];then
		content=$(cat "$1");
		ver=$(echo "$content" | grep 'Version:' | sed -e "s/Version: //g");
		if [ "$2" == "" ]; then
			r="$ver";
		else
			(echo "$ver" | grep -qc "$2") && r="$ver";
		fi;
	fi;
	echo $r;
	[ ${#r} -gt 0 ] && exit 0 || exit 1;
};
_compare_version(){

	min=$(printf "$1\n$2\n" | sort -V | head -n1);
	max=$(printf "$1\n$2\n" | sort -V | tail -n1);
	
	[ $min == $max ] && printf '=' && return;
	[ $1 == $max ] && printf '>' && return;
	[ $1 == $min ] && printf '<' && return;
};
_paktc_timer(){
if [ "$1" == "0" ] || [ "${#1}" -eq 0 ];then
	read -n 1 -s -r -p "Press any key to continue";
else
	for (( i=$1; i>0; i--)); do
		sp=$(printf '%*s' $[$1-$i+1] | tr ' ' '.');
		printf "\rPress any key to continue$sp"
		read -s -n 1 -t 1 key
		if [ $? -eq 0 ]
		then
			break
		fi;
	done
fi;
echo -e "\033[2K\r"; #remove characters from console
};
_check_lib(){
	case "$1" in
		"PCSC")	#Create symlink to the PCSC header files, if the last include path of the compiler don't point to it
				echo -e "\nCheck for PCSC header files and try to symlink to the correct PCSC header files if the last compiler include path points to the wrong location...";
				if [ ${#incdir} -gt 0 ] && [ ! -d "$incdir/PCSC" ]; then
					headerdir="$(dirname $(find "$prefixdir" -type f -name "pcsclite.h" | head -n 1))";
					[ ${#headerdir} -gt 0 ] && ln -s "$(realpath --relative-to="$incdir" "$headerdir")" "$incdir/PCSC";
					[ ${#headerdir} -gt 0 ] && echo "Symlink $incdir/PCSC -> $headerdir created, to point to the PCSC header files." || "No PCSC header files found in $prefixdir and it's sub directories!";
				else
					[ ${#incdir} -gt 0 ] && echo "PCSC header files are in the correct location: $incdir/PCSC" || echo "Compiler returns no include directories!";
				fi;;
		*) echo "not implemented yet!";
	esac;
};
_check_bin(){

	bins=( git curl jq gcc g++ gperf bison flex texinfo help2man make libncurses5-dev \
		   python3-dev autoconf automake libtool libtool-bin gawk wget bzip2 xz-utils unzip \
		   patch libstdc++6 rsync );
	failed=0;
	for e in "${bins[@]}";
	do
		dpkg -s "$e" &>/dev/null;
		if [ ! "$?" -eq "0" ];then
			packages="$packages $e";
			failed=1;
		fi;
	done;
	[ "$failed" == 1 ] && echo -e "$r_l""\nCHECK -> You need to install the following tools to use this plugin properly:\n"$y_l"apt install$packages\n""$re_" && _paktc_timer 10;
	return $failed;
};
_check_config(){
	nok=0;
	[ -z ${CTNG_USER+x} ] && nok=1;
	[ -z ${LIBS+x} ] && nok=1;
	
	if [ $nok -eq 1 ]; then 
		clear;
		echo -e "$r_l""\nCHECK -> Your config file seems to be outdated. Please restart s3 as follows to recreate an updated config file:\n"$y_l"./s3 tcupdate -r\n""$re_";
		_paktc_timer 10;
		return $nok;
	fi;
};	
_check_github_api_limits(){
	
	limit=$(curl --silent "https://api.github.com/rate_limit" | jq -r '.resources.core.limit');
	remaining=$(curl --silent "https://api.github.com/rate_limit" | jq -r '.resources.core.remaining');
	reset=$(curl --silent "https://api.github.com/rate_limit" | jq -r '.resources.core.reset');
	reset_time=$(date -d @$reset);
	
	if [ "$remaining" -lt "$1" ]; then
		echo -e "$y_l""NOTE -> Please wait until "$g_l"$reset_time"$y_l" to reset your configuration file."\
					"The most recent versions and download links for the libraries are determined dynamically via the Github API."\
					"Exceeding the rate limit on Github API will result in failures on generationg the configuration file."\
					"Your Github API rate limit will be reset soon on $reset_time."\
					"\nFor "$b_l"unauthenticated requests"$y_l", the rate limit allows for "$b_l"up to $limit requests per hour"$y_l". Unauthenticated requests are associated with the originating IP address, and not the user making requests."\
					"\n$re_";
		return 0;
	else
		return 1;
	fi;
};
_create_config(){
	#check existing jq
	if [ ! $(which jq) ];then
		echo -e "$r_l""\nCHECK -> Without the tool 'jq' automatic config file generation is not possible. Please install it first:\n"$y_l"apt install jq\n""$re_" && _paktc_timer 10;
		return 1;
	fi;
	
	lib_comments=(	"#Enable/Disable (1|0)"
					"#Displayname"
					"#Versionnumber"
					"#Filename and optional version number to check in pkgconfig folder for an existing library to get version information"
					"#Valid URL for downloading sources of library\n#List of build commands below. Pay attention to the SEMICOLON at the end of EACH\n#command and the correct quoting (' or \") for or to avoid expansion of variables.\n#Tokens @TOOLCHAIN@, @CC@, @RANLIB@, @PREFIX@, @HOST@, @VALIDATE@ are replaced automatically."
					"#build command" );
	lib_settings=( "" name version check url tasks );
	lib_keys=( SAMPLE_LIB SSL_111 SSL_110 SSL_102 SSL_100 SSL_098 LIB_USB LIB_PCSC LIB_ZLIB );
	lib_names=( "SampleLib" "OpenSSL" "OpenSSL" "OpenSSL" "OpenSSL" "OpenSSL" "libusb" "PCSC-Lite" "zlib" );
	lib_versions=(	"0.2.9sl"
					"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_1_1[a-z].*"))][0] | .name' | sed -e 's#OpenSSL_##g; s#_#.#g; s#\"##g')"
					"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_1_0[a-z].*"))][0] | .name' | sed -e 's#OpenSSL_##g; s#_#.#g; s#\"##g')"
					"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_0_2[a-z].*"))][0] | .name' | sed -e 's#OpenSSL_##g; s#_#.#g; s#\"##g')"
					"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=2&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_0_0[a-z].*"))][0] | .name' | sed -e 's#OpenSSL_##g; s#_#.#g; s#\"##g')"
					"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=2&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_0_9_8[a-z].*"))][0] | .name' | sed -e 's#OpenSSL_##g; s#_#.#g; s#\"##g')"
					"$(curl --silent "https://api.github.com/repos/libusb/libusb/releases/latest" | jq -r '.tag_name' | cut -c 2-)"
					"$(curl --silent https://salsa.debian.org/api/v4/projects/19181/repository/tags | jq -r '.[0].name' | awk -F '[/-]' '{printf $2}')"
					"$(curl --silent https://api.github.com/repos/madler/zlib/tags | jq -r '.[0].name' | cut -c 2-)" );
	lib_checks=( "samplelib.pc" "openssl.pc" "openssl.pc" "openssl.pc" "openssl.pc" "openssl.pc" "libusb-1.0.pc" "libpcsclite.pc" "zlib.pc" );
	lib_urls=(	"https://sampleurl.com/archive.tar.bz"
				"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_1_1[a-z].*"))][0] | .tarball_url' | sed -e 's#\"##g')"
				"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_1_0[a-z].*"))][0] | .tarball_url' | sed -e 's#\"##g')"
				"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_0_2[a-z].*"))][0] | .tarball_url' | sed -e 's#\"##g')"
				"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=2&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_0_0[a-z].*"))][0] | .tarball_url' | sed -e 's#\"##g')"
				"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=2&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_0_9_8[a-z].*"))][0] | .tarball_url' | sed -e 's#\"##g')"
				"$(curl --silent "https://api.github.com/repos/libusb/libusb/releases/latest" | jq -r '.assets[1].browser_download_url')"
				"$(echo 'https://salsa.debian.org/api/v4/projects/19181/repository/archive.tar.bz2?sha='$(curl --silent https://salsa.debian.org/api/v4/projects/19181/repository/tags | jq -r '.[0].commit.id'))"
				"$(curl --silent https://api.github.com/repos/madler/zlib/tags | jq -r '.[0].tarball_url')" );
	lib_tasks=(	'( "(\"export TOOLCHAIN=@TOOLCHAIN@;\")" "(\"export CC=@CC@;\")" "(\"export RANLIB=@RANLIB@;\")" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "(\"./Configure --prefix=@PREFIX@/ --host=@HOST@ linux-generic32 shared;\")" "(\"make;\")" "(\"make install;\")" )'
				'( "(\"export TOOLCHAIN=@TOOLCHAIN@;\")" "(\"export CC=@CC@;\")" "(\"export RANLIB=@RANLIB@;\")" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "(\"./Configure --prefix=@PREFIX@/ linux-generic32 shared;\")" "(\"make;\")" "(\"make install;\")" )'
				'( "(\"export TOOLCHAIN=@TOOLCHAIN@;\")" "(\"export CC=@CC@;\")" "(\"export RANLIB=@RANLIB@;\")" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "(\"./Configure --prefix=@PREFIX@/ linux-generic32 shared;\")" "(\"make;\")" "(\"make install;\")" )'
				'( "(\"export TOOLCHAIN=@TOOLCHAIN@;\")" "(\"export CC=@CC@;\")" "(\"export RANLIB=@RANLIB@;\")" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "(\"./Configure --prefix=@PREFIX@/ linux-generic32 shared;\")" "(\"make;\")" "(\"make install SHLIB_VERSION_NUMBER=1.0.2 SHLIB_MINOR=0.2;\")" )'
				'( "(\"export TOOLCHAIN=@TOOLCHAIN@;\")" "(\"export CC=@CC@;\")" "(\"export RANLIB=@RANLIB@;\")" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "(\"./Configure --prefix=@PREFIX@/ linux-generic32 shared;\")" "(\"make;\")" "(\"make install;\")" )'
				'( "(\"export TOOLCHAIN=@TOOLCHAIN@;\")" "(\"export CC=@CC@;\")" "(\"export RANLIB=@RANLIB@;\")" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "(\"./Configure --prefix=@PREFIX@/ linux-generic32 shared;\")" "(\"make;\")" "(\"make install;\")" )'
				'( "(\"export TOOLCHAIN=@TOOLCHAIN@;\")" "(\"export CC=@CC@;\")" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "(\"./configure --prefix=@PREFIX@/ --host=@HOST@ --disable-udev;\")" "(\"make;\")" "(\"make install;\")" )'
				'( "(\"export TOOLCHAIN=@TOOLCHAIN@;\")" "(\"export CC=@CC@;\")" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "(\"./configure --prefix=@PREFIX@/ --host=@HOST@ --disable-libudev --disable-libsystemd LIBUSB_LIBS=\\\"-L@PREFIX@/lib -lusb-1.0 -lrt\\\" LIBUSB_CFLAGS=\\\"-I@PREFIX@/include/libusb-1.0\\\";\")" "(\"make;\")" "(\"make install;\")" "(\"@VALIDATE@ \"PCSC\";\")" )'
				'( "(\"export TOOLCHAIN=@TOOLCHAIN@;\")" "(\"export CC=@CC@;\")" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "(\"./configure --prefix=@PREFIX@/;\")" "(\"make;\")" "(\"make install;\")" )' );

	ctng_build_tasks=( "(\"./ct-ng upgradeconfig;\")" "(\"./ct-ng show-config;\")" "(\"./ct-ng build;\")" );
	ctng_build_tasks_comment="#build command";
	ctng_setup_tasks=( "(\"git clone --progress \"\$CTNG_REPO_URL\" \"@CTNGSOURCE@\";\")" "(\"./bootstrap;\")" "(\"./configure --enable-local;\")" "(\"make;\")" "(\"touch \"@CTNGSOURCE@/.config\";\")" );
	ctng_setup_tasks_comment="#setup command";
		
	echo '#CROSS toolchain build settings'	 						 						 				 				 >"$configname";
	echo 'CTNG_USER="ctng"; #low privileged user that run ct-ng (will be created automatically, if not exists)'				>>"$configname";
	echo 'CTNG_REPO_URL="https://github.com/crosstool-ng/crosstool-ng"; #Repository to load ct-ng from'	 					>>"$configname";
	echo '#List of build and setup commands below. Pay attention to the SEMICOLON at the end of EACH'	 					>>"$configname";
	echo '#command and the correct quoting ('"'"' or ") for or to avoid expansion of variables.'	 						>>"$configname";
	echo '#Tokens @CTNGSOURCE@ are replaced automatically. The commands are executed in the context of the user CTNG_USER.'	>>"$configname";
	i=0;
	for bt in "${ctng_build_tasks[@]}";
	do
		echo -e "CTNG_BUILD_tasks"$([ "$i" -gt "0" ] && echo "+")"=$bt; $ctng_build_tasks_comment$(($i+1))"					>>"$configname";
		((i++));
	done;
	i=0;
	for st in "${ctng_setup_tasks[@]}";
	do
		echo -e "CTNG_SETUP_tasks"$([ "$i" -gt "0" ] && echo "+")"=$st; $ctng_setup_tasks_comment$(($i+1))"					>>"$configname";
		((i++));
	done;
	
	echo -e '\n#LIBRARY update build settings\n#List of ordered libraries. Only libraries in this list are available'		>>"$configname";
	echo "LIBS=(${lib_keys[@]});"																							>>"$configname";

	i=0;
	for key in "${lib_keys[@]}";
	do
		for setting in "${lib_settings[@]}";
		do
			case "$setting" in
				"")   		if [ -z $setting ];then
								echo -e "\n#"${lib_names[$i]}" "${lib_versions[$i]}""		>>"$configname";
							fi;
							echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting""=\"$([ "$key" == "SAMPLE_LIB" ] && echo '0' || echo '1')\";$([ "$i" -eq "0" ] && echo " ${lib_comments[0]}")"	>>"$configname";;
				"name")   	echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting""=\"${lib_names[$i]}\";$([ "$i" -eq "0" ] && echo " ${lib_comments[1]}")"		>>"$configname";;
				"version")	echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting""=\"${lib_versions[$i]}\";$([ "$i" -eq "0" ] && echo " ${lib_comments[2]}")"	>>"$configname";;
				"check")	[ $(echo -e "$key" | grep -c "SSL_\|SAMPLE_") -gt 0 ] && chk="$(echo -e "${lib_checks[$i]} $(echo ${lib_versions[$i]} | sed -e 's/[a-zA-Z]//g')")" || chk="${lib_checks[$i]}";
							echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting""=\"$chk\";$([ "$i" -eq "0" ] && echo " ${lib_comments[3]}")"	>>"$configname";;
				"url")		echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting""=\"${lib_urls[$i]}\";$([ "$i" -eq "0" ] && echo " ${lib_comments[4]}")"		>>"$configname";;
				"tasks")	unset tasks;j=0;
							declare -a tasks="${lib_tasks[$i]}"
							for t in "${tasks[@]}";
							do
								echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting"$([ "$j" -gt "0" ] && echo "+")"=$t;$([ "$i" -eq "0" ] && echo " ${lib_comments[5]}$(($j+1))")"	>>"$configname";
								((j++));
							done;;
			esac;
		done;
		((i++))
	done;

	return 0;
};
_create_toolchaincfg(){
	cd "$1/bin";
	compilername="$3""-gcc";compilername=$(realpath -s $compilername);
	sr=$("$compilername" -print-sysroot 2>/dev/null);
	sr=$(realpath -sm "$sr" 2>/dev/null);
	if [ ${#sr} -eq 0 ];then
		sysroot="$4";
	else
		sysroot="${sr#"$1/"}";
	fi;
	[ ${#5} -gt 0 ] && lsd="$5" || lsd="/usr/lib";
	[ ${#7} -gt 0 ] && info="$7" || info="$(echo -e "\\\n
!!! crosstool-NG Toolchain !!!\\\n
\\\n
$6\\\n
\\\n")";
	
	cd "$tccfgdir";
	cat << EOF > $2
_toolchainname="$2";
default_use="USE_UTF8 USE_LIBCRYPTO";
_description="$6"
_oscamconfdir_default="/etc/tuxbox/config";
_oscamconfdir_custom="";

_compiler="$3-";
_sysroot="$sysroot";
_libsearchdir="$lsd";
_toolchainfilename="$(echo -en "$(basename "${8%..*}")" | base64)";
_md5sum="$(cd "$dldir" && md5sum $(basename "${8%..*}"))";
_tc_info="$info";
_tc_infolines="5";
EOF
};
